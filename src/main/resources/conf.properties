#####################################################################
##   I Doc View   All Rights Reserved.                      2014   ##
#####################################################################
docview.version=6.1.13_20160127

#####################################################################
## Data
#####################################################################
# docview data directory, e.g. /idocv/data/
data.dir=${pom.data.dir}
# docview data URL prefix, e.g. http://data.idocv.com/
data.url=${pom.data.url}

# Whether auto delete old data, true or false
data.auto.cleanup.switch=false
# auto delete old data check cron
data.auto.cleanup.cron=0 0 2 * * *
# max data keep days 
data.max.keep.days=90

#####################################################################
## Restrictions
#####################################################################
# Supported upload file types, separated by comma, regex can be used: 
# .* matches all types. e.g. doc,docx,xls,xlsx,ppt,pptx,pdf,txt
filetype.upload=${pom.filetype.upload}
# Supported preview file types. similar to upload types.
filetype.view=${pom.filetype.view}
upload.max.size=${pom.upload.max.size}
upload.max.msg=${pom.upload.max.msg}
# Comma separated URL file domain(s) when view doc by URL.
# * means allow ALL, file:/// allow local files
url.view.allow.domains=*
# When beyond previous domain(s), show following message.
url.view.allow.domains.msg=\u4E0D\u5141\u8BB8\u9884\u89C8\u8BE5\u57DF\u540D\u4E0B\u7684\u6587\u6863
# for the sake of security, when view server local file by URL, directory prefix can be replaced
# format: <before replace 1>@<after replace 1>#<before replace 2>@<after replace 2>
# e.g. http://api.idocv.com/view/url?url=file:///dir1/test.docx
# previous dir1 in the URL will be replaced by d:/idocv, final URL will be:
# http://api.idocv.com/view/url?url=file:///d:/idocv/test.docx
url.view.dir.replace=dir1@d:/idocv#dir2@d:/idocv/data

#####################################################################
## View page
#####################################################################
# Whether load the preview page asynchronously or not
view.page.load.async=true
# Whether enable a share page
view.page.share=false
# following <view.page.style.***> params can set document view style.
# supported values are: html, img or both.
# each style has its pros and cons. html style is more speady and img style is more accurate.
# e.g. view.page.style.***=html
#     document will auto converted to html type and the default view style is html.
#     if you want to view by img style, you can pass param type=img when view doc.
# e.g. view.page.style.***=html|img
#     document will auto converted to html & image type and the default view style is the first one: html.
#     if you want to view by img style, you can pass param type=img when view doc.
# the difference between those two examples are:
#     the first one only pre-convert to html files and it is a bit slow when view by img style for the first time.
#     the second one will pre-convert to both html and image files.
#       no mater which style you view, it is NO need to wait for convert and it is ready for view it directly.
view.page.style.word=html
view.page.style.excel=html
view.page.style.pdf=imgall

# PPT sync view draw server
view.page.draw.server=${pom.view.page.draw.server}
# valid duration(minute) of private session id
view.page.private.session.duraion=60

# PPT image quality(resolution by pixel) when view by image
view.img.quality.ppt.thumb.width=480
view.img.quality.ppt.big.width=1024
# PDF image quality(resolution by pixel) when view by image
# reference values: a0=2384, a1=1684, a2=1191, a3=420, 0 will NOT convert
view.img.quality.pdf.thumb.width=0
view.img.quality.pdf.big.width=1191

# which filetypes' images need to be watermarked. e.g. ppt,pptx,pdf
view.img.watermark.filetype=none
view.img.watermark.path=${data.dir}logo.png
# watermark params, e.g. <logo> miff:- | composite -dissolve 50 -gravity southeast -geometry +10+10 - <src> <dest>
# <logo>, <src>, <dest> will be replaced by real image, representing watermark logo, source image and destination image 
# ref: http://www.imagemagick.org/Usage/annotating/#wmark_image
view.img.watermark.params=<logo> miff:- | composite -dissolve 50 -gravity southeast -geometry +10+10 - <src> <dest>

#####################################################################
## Database
#####################################################################
db.mongodb.ip=${pom.db.mongodb.ip}
db.mongodb.port=${pom.db.mongodb.port}

#####################################################################
## Convert
#####################################################################
# file converter(s):
converter.word2html=${pom.converter.word2html}
converter.word2pdf=${pom.converter.word2pdf}
converter.excel2html=${pom.converter.excel2html}
converter.excel2pdf=${pom.converter.excel2pdf}
converter.ppt2jpg=${pom.converter.ppt2jpg}
converter.pdf2img=${pom.converter.pdf2img}
converter.pdf2html=${pom.converter.pdf2html}
converter.img2jpg=${pom.converter.img2jpg}
converter.audio2mp3=${pom.converter.audio2mp3}
converter.zip2file=${pom.converter.zip2file}
converter.cad2img=${pom.converter.cad2img}

# convert switch mode after file uploaded
# 0: Do NOT convert document when upload
# 1: Convert document according to following param(s) when upload successfully(recommended)
# 2: Force convert document instantly and ignore following param(s) when upload successfully.
convert.switch.mode=1
# average upload frequency within five minutes.
# when convert mode is 1 and upload frequency is greater than this,
# instant convert switch automatically turn off.
convert.switch.threshold.upload.frequency=20
convert.switch.threshold.cpu.usage=0.8
# When memory usage rate is higher than this percent and switch mode is 1,
# instant convert switch automatically turn off.
# Double value: 0~1, recommend value: 0.8
convert.switch.threshold.memory.usage=0.8
# check system load cron, including upload frequency, CPU usage, memory usage, etc.
# if all of these are below their threshold, start batch convert oldest 
# ${convert.batch.size} docs and instant convert switch automatically turn on when
# switch mode is 1.
convert.switch.check.system.load.cron=0 */3 * * * *
# batch size when batch convert
convert.batch.size=30
# sleep time(milisecond) between batch file convert
convert.batch.interval=60000

#####################################################################
## Cluster
#####################################################################
# Whether turn on cluster functionality: true|false
# The following parameters are valid only if this switch is set to true.
cluster.switch=false

# The mode when upload original file to Distributed File System.
# 0: Do NOT upload file to DFS.
# 1: Upload file to DFS instantly.
# 2: Upload file to DFS at the time set by "cluster.upload2dfs.cron"
cluster.upload2dfs.mode=0

# Cron expression about when to upload file to DFS.
# NOT valid if previous mode set to 0
# e.g. 0 30 0 * * * (upload NEW file(s) to DFS at 00:30:00 AM every day)
cluster.upload2dfs.cron=0 30 0 * * *

# batch size upload to DFS
cluster.upload2dfs.batch.size=50
# sleep time(milisecond) between batch upload to DFS
cluster.upload2dfs.batch.interval=2000

# DFS upload server url, format: <node1>@<upload url 1>#<node2>@<upload url 2>...
# e.g. node1@http://west1.idocv.com/doc/upload#node2@http://west2.idocv.com/doc/upload
cluster.dfs.server.upload=node1@http://dfs1.idocv.com/doc/upload#node2@http://dfs2.idocv.com/doc/upload

# DFS download server prefix, format: <node1>@<download url 1>#<node2>@<download url 2>...
# each url MUST ending with slash, e.g. node1@http://dfs1.idocv.com/#node2@http://dfs2.idocv.com/
cluster.dfs.server.download=node1@http://dfs1.idocv.com/#node2@http://dfs2.idocv.com/

#####################################################################
## Third Party parameters
#####################################################################
# Whether check user when upload file: true|false
thd.upload.check.switch=false

# User check key, only valid when check switch set to true
thd.upload.check.key=12345

# App keys used by view check, format: <app1>@<key1>:<switch1>#<app2>@<key2>:<switch1>...
# switch 1: on, 0: off.
thd.view.check.keys=yishang@thisyishangkey:1#gxkt@thisgxktkey:0

# Whether check user when view file: true|false
thd.view.check.switch=false
# which URI should be checked, multi URIs can be seperated by ","
# URIs can be: /doc/upload,/doc/download,/view/, * means check all
thd.view.check.uri=*
# Whether check user everytime or session time
# true: check user auth everytime by <thd.view.check.url>
# false: check result will be saved for session long time until next check
thd.view.check.everytime=false
# View check server url
thd.view.check.url=http://data.idocv.com/check.json
# View check key name, it will be appended to previous url
# e.g. http://data.idocv.com/check.json?authkey=abcdefg
thd.view.check.key.name=authkey
# default view restriction values, including upload, view, read, down and copy
# upload: 0. do NOT allow upload, 1. allow upload
# view: 0. do NOT allow view, 1. allow view
# read: 0. allow read, >0. allow read page size
# down: 0. do NOT allow download, 1. allow download
# copy: 0. do NOT allow copy, 1. allow copy
thd.view.check.default={"upload":"1", "view":"1", "read":"0", "down":"1","copy":"1"}

# Whether save MULTI or UNIQUE copy of the same file when upload several times.
# none: allow duplicate upload, do NOT set to none in production environment.
# url: check URL before view, if already exist a same URL doc, view existing doc directly.
# md5: check md5 before view, if already exist a same md5 doc, view existing doc directly.
# url|md5(recommended): check url & md5 both
thd.upload.unique=url|md5

# If previous(filetype.view) types exceeds default types
# (doc,docx,xls,xlsx,ppt,pptx,pdf,txt), then you can add your own 
# view template, the format is: <extensions>@<template name>#...
# extensions are file extensions and template name is corresponding to 
# JSP file name under "docview\WEB-INF\views\template" folder.
# different extensions are separated by ",", extensions and template name
# are separated by "@", different groups are separated by "#",
# remember: all letters should be lowercase.
# e.g. jpg,gif,png,bmp@image#mp3,midi@audio#avi,rmvb,mp4,mkv@video
thd.view.template=jpg,gif,png,bmp,tif@image#mp3,m4a,midi,wma@audio#avi,rmvb,mp4,mkv@video