#####################################################################
##   I Doc View   All Rights Reserved.                      2014   ##
#####################################################################
docview.version=3.2.3_20140219

#####################################################################
## Data
#####################################################################
# docview data directory, e.g. D:/idocv/data/
data.dir=${pom.data.dir}
# docview data URL prefix, e.g. http://data.idocv.com/
data.url=${pom.data.url}

#####################################################################
## Restrictions
#####################################################################
# Supported upload file types, separated by comma, regex can be used: 
# .* matches all types. e.g. doc,docx,xls,xlsx,ppt,pptx,pdf,txt
filetype.upload=doc,docx,xls,xlsx,ppt,pptx,pdf,txt
# Supported preview file types. similar to upload types.
filetype.view=doc,docx,xls,xlsx,ppt,pptx,pdf,txt
upload.max.size=${pom.upload.max.size}
upload.max.msg=${pom.upload.max.msg}

#####################################################################
## View page
#####################################################################
# Whether load the preview page asynchronously or not
view.page.load.async=true

#####################################################################
## Database
#####################################################################
db.mongodb.ip=${pom.db.mongodb.ip}
db.mongodb.port=${pom.db.mongodb.port}

#####################################################################
## Convert
#####################################################################
converter.word2html=${pom.converter.word2html}
converter.word2pdf=${pom.converter.word2pdf}
converter.excel2html=${pom.converter.excel2html}
converter.ppt2jpg=${pom.converter.ppt2jpg}
converter.pdf2img=${pom.converter.pdf2img}
converter.pdf2html=${pom.converter.pdf2html}
converter.pdfsign=${pom.converter.pdfsign}

# convert switch mode after file uploaded
# 0: Do NOT convert document when upload
# 1: Convert document according to following param(s) when upload successfully(recommended)
# 2: Force convert document instantly and ignore following param(s) when upload successfully.
convert.switch.mode=1
# average upload frequency within five minutes.
# when convert mode is 1 and upload frequency is greater than this,
# instant convert switch automatically turn off.
convert.switch.threshold.upload.frequency=300
convert.switch.threshold.cpu.usage=0.8
# When memory usage rate is higher than this percent and switch mode is 1,
# instant convert switch automatically turn off.
# Double value: 0~1, recommend value: 0.8
convert.switch.threshold.memory.usage=0.8
# check system load cron, including upload frequency, CPU usage, memory usage, etc.
# if all of these are below their threshold, start batch convert oldest 
# ${convert.batch.size} docs and instant convert switch automatically turn on when
# switch mode is 1.
convert.switch.check.system.load.cron=0 */5 * * * *
# batch size when batch convert
convert.batch.size=100
# sleep time(milisecond) between batch file convert
convert.batch.interval=10000

#####################################################################
## Cluster
#####################################################################
# Whether turn on cluster functionality: true|false
# The following parameters are valid only if this switch is set to true.
cluster.switch=false

# The mode when upload original file to Distributed File System.
# 0: Do NOT upload file to DFS.
# 1: Upload file to DFS instantly.
# 2: Upload file to DFS at the time set by "cluster.upload2dfs.cron"
cluster.upload2dfs.mode=0

# Cron expression about when to upload file to DFS.
# NOT valid if previous mode set to 0
# e.g. 0 30 0 * * * (upload NEW file(s) to DFS at 00:30:00 AM every day)
cluster.upload2dfs.cron=0 30 0 * * *

# batch size upload to DFS
cluster.upload2dfs.batch.size=50
# sleep time(milisecond) between batch upload to DFS
cluster.upload2dfs.batch.interval=2000

# DFS upload server url, e.g. http://api.idocv.com/doc/upload
cluster.dfs.server.upload=http://west.idocv.com/xiwang/upload

# DFS download server prefix, ending with slash, e.g. http://host:port/
cluster.dfs.server.download=http://west.idocv.com/dfs/

#####################################################################
## Third Party parameters
#####################################################################
# Whether check user when upload file: true|false
thd.upload.check.switch=false

# User check key, only valid when check switch set to true
thd.upload.check.key=12345

# Whether save MULTI or UNIQUE copy of the same file when upload several times.
# true: only keep one copy of the file, following upload of the same file
#       will just use the first one.
# false: allow duplicate upload, do NOT set to false in production environment.
thd.upload.unique=false

# If previous(filetype.view) types exceeds default types
# (doc,docx,xls,xlsx,ppt,pptx,pdf,txt), then you can add your own 
# view template, the format is: <extensions>@<template name>#...
# extensions are file extensions and template name is corresponding to 
# JSP file name under "docview\WEB-INF\views\template" folder.
# different extensions are separated by ",", extensions and template name
# are separated by "@", different groups are separated by "#",
# remember: all letters should be lowercase.
# e.g. jpg,gif,png,bmp@image#mp3,midi@audio#avi,rmvb,mp4,mkv@video
thd.view.template=jpg,gif,png,bmp@image#mp3,midi@audio#avi,rmvb,mp4,mkv@video